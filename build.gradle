buildscript {
    ext.junit_version = '5.1.0'
    ext.kotlin_version = '1.4.31'
}

plugins {
    id 'maven-publish'
    id 'io.github.gradle-nexus.publish-plugin' version '1.1.0'
    id 'org.jetbrains.dokka' version '0.10.1'
    id 'org.jetbrains.kotlin.multiplatform' version "$kotlin_version"
    id 'org.jetbrains.kotlin.kapt' version "$kotlin_version"
    id 'org.jetbrains.kotlin.plugin.serialization' version "$kotlin_version"
}

group = 'com.jeffpdavidson.kotwords'
version = '1.0.0-SNAPSHOT'

repositories {
    mavenCentral()
}

kotlin {
    jvm {
        withJava()

        compilations.main.kotlinOptions {
            jvmTarget = "1.8"
        }

        compilations.test.kotlinOptions {
            jvmTarget = "1.8"
        }
    }

    js {
        browser {
            dceTask {
                keep 'kotwords'
            }
        }
    }
}

// HACK: To make JS test resources accessible to tests, we copy them to the Karma server's base
// directory where they can be served (see karma.config.d/resources.js). We do this right before
// running the tests rather than after processing resources as subsequent compilation steps
// might clear the base directory.
jsBrowserTest.doFirst {
    delete {
        delete("$buildDir/js/packages/kotwords-test/node_modules/resources/test")
    }
    copy {
        from("$buildDir/processedResources/js/test")
        into("$buildDir/js/packages/kotwords-test/node_modules/resources/test")
    }
}

dependencies {
    commonMainImplementation "io.ktor:ktor-io:1.5.4"
    commonMainImplementation "org.jetbrains.kotlinx:kotlinx-serialization-core:1.1.0"
    commonMainImplementation "org.jetbrains.kotlinx:kotlinx-serialization-json:1.1.0"
    commonMainImplementation "net.mamoe.yamlkt:yamlkt:0.9.0"
    commonMainImplementation "io.github.pdvrieze.xmlutil:serialization:0.81.2"

    // TODO: Migrate to kotlinx-datetime if parsing/formatting support is added.
    commonMainImplementation "com.soywiz.korlibs.klock:klock:2.0.7"

    commonTestImplementation "org.jetbrains.kotlin:kotlin-test-annotations-common"
    commonTestImplementation "org.jetbrains.kotlin:kotlin-test-common"

    jvmMainImplementation "org.apache.pdfbox:pdfbox:2.0.9"
    jvmMainImplementation "org.glassfish:javax.json:1.1.2"
    jvmMainImplementation "org.jsoup:jsoup:1.11.2"

    jvmTestImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.4.2"
    jvmTestImplementation "org.jetbrains.kotlin:kotlin-test-junit"

    jsMainImplementation(npm("jszip", "3.4.0"))
    jsMainImplementation(npm("text-encoding", "0.7.0"))
    jsMainImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-js:1.4.2"
    jsMainImplementation "org.jetbrains.kotlinx:kotlinx-html-js:0.7.3"

    jsTestImplementation "org.jetbrains.kotlin:kotlin-test-js"
}

dokka {
    outputFormat = 'html'
    outputDirectory = "$buildDir/javadoc"

    configuration {
        perPackageOption {
            prefix = "com.jeffpdavidson.kotwords.formats.json"
            suppress = true
        }
    }
}

task dokkaJar(type: Jar) {
    group = JavaBasePlugin.DOCUMENTATION_GROUP
    archiveClassifier.set("javadoc")
    from(dokka)
}

tasks.named("jvmSourcesJar") {
    exclude("com/jeffpdavidson/kotwords/formats/json")
}

publishing {
    publications {
        jvm {
            artifact(dokkaJar)
        }
    }
}

nexusPublishing {
    repositories {
        sonatype {
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
            username = System.env.OSSRH_DEPLOY_USERNAME
            password = System.env.OSSRH_DEPLOY_PASSWORD
        }
    }
}
